import { NextRequest, NextResponse } from "next/server"
import { createClient } from "@/utils/supabase/server"
import { createAdminClient } from "@/utils/supabase/admin"

export async function GET(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const { id } = await params;
    
    // Get the current user
    const supabase = await createClient();
    const { data: { user }, error: userError } = await supabase.auth.getUser();
    
    if (userError || !user) {
      console.error('Auth error:', userError);
      return NextResponse.json(
        { error: 'Authentication error', details: userError?.message },
        { status: 401 }
      );
    }

    const referentialId = id;

    if (!referentialId) {
      return NextResponse.json(
        { error: "Referential ID is required" },
        { status: 400 }
      )
    }
    
    // Use the admin client to bypass RLS policies
    console.log('Using admin client to fetch referential');
    const adminClient = await createAdminClient();
    
    const { data: referential, error } = await adminClient
      .from("referentials" as any)
      .select("*")
      .eq("id", referentialId)
      .single();
      
    console.log('Referential fetch result:', { referential, error: error?.message });

    if (error) {
      console.error("Error fetching referential:", error)
      return NextResponse.json(
        { error: "Failed to fetch referential" },
        { status: 500 }
      )
    }

    return NextResponse.json({ referential })
  } catch (error) {
    console.error("Error in referential GET route:", error)
    return NextResponse.json(
      { error: "Internal server error" },
      { status: 500 }
    )
  }
}

// Add PUT method that calls the PATCH method for compatibility
export async function PUT(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  // Forward to PATCH handler
  return PATCH(request, { params });
}

export async function PATCH(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  console.log('=== PATCH /api/referentials/[id] - Updating a referential ===');
  console.log('Request URL:', request.url);
  console.log('Request method:', request.method);
  console.log('Request headers:', Object.fromEntries(request.headers.entries()));
  
  try {
    const { id } = await params;
    console.log('Referential ID:', id);
    
    // Get request body first to avoid any auth issues if the body is invalid
    let body;
    try {
      body = await request.json();
      console.log('Request body:', JSON.stringify(body, null, 2));
    } catch (jsonError) {
      console.error('Error parsing request body:', jsonError);
      return NextResponse.json(
        { error: 'Invalid request body' },
        { status: 400 }
      );
    }
    
    // Extract fields from the request body
    const { name, description, color, entityIds } = body;
    const referentialId = id;
    
    if (!referentialId) {
      console.error('Referential ID is required');
      return NextResponse.json(
        { error: 'Referential ID is required' },
        { status: 400 }
      );
    }
    
    if (!name) {
      console.error('Referential name is required');
      return NextResponse.json(
        { error: 'Referential name is required' },
        { status: 400 }
      );
    }
    
    // Get the current user
    const supabase = await createClient();
    const { data: { user }, error: userError } = await supabase.auth.getUser();
    
    if (userError || !user) {
      console.error('Auth error:', userError);
      return NextResponse.json(
        { error: 'Authentication error', details: userError?.message },
        { status: 401 }
      );
    }
    
    // Create the admin client early to use for all database operations
    console.log('Creating admin client...');
    const adminClient = await createAdminClient();
    console.log('Admin client created successfully');
    
    // First, check if the referential exists
    console.log('Checking if referential exists:', referentialId);
    const { data: existingReferential, error: fetchError } = await adminClient
      .from('referentials' as any)
      .select('*')
      .eq('id', referentialId)
      .single();
    
    if (fetchError) {
      console.error('Error fetching referential:', fetchError);
      return NextResponse.json(
        { error: 'Referential not found', details: fetchError.message },
        { status: 404 }
      );
    }
    
    console.log('Existing referential found:', existingReferential);
    
    // Prepare update data
    const updateData: Record<string, any> = {
      name,
      updated_at: new Date().toISOString()
    };
    
    // Only update description if it's provided
    if (description !== undefined) {
      updateData.description = description;
    }
    
    // Only update color if it's provided
    if (color !== undefined) {
      updateData.color = color;
    }
    
    // Update the referential
    console.log('Updating referential with data:', updateData);
    const { data: updatedReferential, error: updateError } = await adminClient
      .from('referentials' as any)
      .update(updateData)
      .eq('id', referentialId)
      .select()
      .single();
    
    if (updateError) {
      console.error('Error updating referential:', updateError);
      return NextResponse.json(
        { error: 'Failed to update referential', details: updateError.message },
        { status: 500 }
      );
    }
    
    console.log('Referential updated successfully:', updatedReferential);
    
    // If entityIds is provided, update the entities to reference this referential
    if (entityIds && Array.isArray(entityIds)) {
      console.log('Updating entities with referential ID');
      
      // First, clear any existing associations
      try {
        // Get entities with this referential ID
        const { data: entitiesWithRef, error: fetchError } = await adminClient
          .from('entities')
          .select('id')
          .filter('referential_id', 'eq', referentialId);
        
        if (!fetchError && entitiesWithRef && entitiesWithRef.length > 0) {
          // Clear the referential_id for these entities using raw SQL
          const { error: clearError } = await adminClient
            .from('entities')
            .update({ updated_at: new Date().toISOString() } as any)
            .filter('referential_id', 'eq', referentialId);
          
          // Execute a separate SQL query to update the referential_id
          await adminClient.rpc('update_entity_referential_to_null', {
            ref_id: referentialId
          }).catch(err => {
            console.error('Error in update_entity_referential_to_null RPC:', err);
          });
          
          if (clearError) {
            console.error('Error updating entities timestamp:', clearError);
          } else {
            console.log('Cleared existing referential associations');
          }
        }
      } catch (error) {
        console.error('Error in clearing referential associations:', error);
        // Continue with the rest of the operation
      }
      
      // Then, set the new associations
      if (entityIds.length > 0) {
        console.log(`Setting referential for ${entityIds.length} entities`);
        
        for (const entityId of entityIds) {
          try {
            // Update timestamp first to avoid type issues
            const { error: updateError } = await adminClient
              .from('entities')
              .update({ updated_at: new Date().toISOString() } as any)
              .eq('id', entityId);
            
            // Then execute a separate SQL query to update the referential_id
            await adminClient.rpc('update_entity_referential', {
              entity_id: entityId,
              ref_id: referentialId
            }).catch(err => {
              console.error(`Error in update_entity_referential RPC for entity ${entityId}:`, err);
            });
            
            if (updateError) {
              console.error(`Error updating entity ${entityId} timestamp:`, updateError);
            }
          } catch (error) {
            console.error(`Error in setting referential for entity ${entityId}:`, error);
          }
        }
        
        console.log('Set referential for entities successfully');
      }
    }
    
    return NextResponse.json({ referential: updatedReferential });
    
  } catch (error: any) {
    console.error("Error in referentials PATCH route:", error);
    console.error('Error stack:', error.stack);
    return NextResponse.json(
      { error: "Internal server error", details: error.message },
      { status: 500 }
    );
  }
}

export async function DELETE(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  console.log('=== DELETE /api/referentials/[id] - Deleting a referential ===');
  console.log('Request URL:', request.url);
  console.log('Request method:', request.method);
  
  try {
    const { id } = await params;
    console.log('Referential ID:', id);
    
    const referentialId = id;
    
    if (!referentialId) {
      console.error('Referential ID is required');
      return NextResponse.json(
        { error: 'Referential ID is required' },
        { status: 400 }
      );
    }
    
    // Get the current user
    const supabase = await createClient();
    const { data: { user }, error: userError } = await supabase.auth.getUser();
    
    if (userError || !user) {
      console.error('Auth error:', userError);
      return NextResponse.json(
        { error: 'Authentication error', details: userError?.message },
        { status: 401 }
      );
    }
    
    // Create the admin client
    console.log('Creating admin client...');
    const adminClient = await createAdminClient();
    console.log('Admin client created successfully');
    
    // First, check if the referential exists
    console.log('Checking if referential exists:', referentialId);
    const { data: existingReferential, error: fetchError } = await adminClient
      .from('referentials' as any)
      .select('*')
      .eq('id', referentialId)
      .single();
    
    if (fetchError) {
      console.error('Error fetching referential:', fetchError);
      return NextResponse.json(
        { error: 'Referential not found', details: fetchError.message },
        { status: 404 }
      );
    }
    
    console.log('Existing referential found:', existingReferential);
    
    // Before deleting the referential, update all entities that reference it
    console.log('Updating entities to remove referential association');
    
    try {
      // Execute a separate SQL query to update the referential_id
      await adminClient.rpc('update_entity_referential_to_null', {
        ref_id: referentialId
      }).catch(err => {
        console.error('Error in update_entity_referential_to_null RPC:', err);
      });
      
      console.log('Cleared referential associations successfully');
    } catch (error) {
      console.error('Error in clearing referential associations:', error);
      // Continue with deletion anyway
    }
    
    // Delete the referential
    console.log('Deleting referential:', referentialId);
    const { error: deleteError } = await adminClient
      .from('referentials' as any)
      .delete()
      .eq('id', referentialId);
    
    if (deleteError) {
      console.error('Error deleting referential:', deleteError);
      return NextResponse.json(
        { error: 'Failed to delete referential', details: deleteError.message },
        { status: 500 }
      );
    }
    
    console.log('Referential deleted successfully');
    return NextResponse.json({ success: true });
    
  } catch (error: any) {
    console.error("Error in referentials DELETE route:", error);
    console.error('Error stack:', error.stack);
    return NextResponse.json(
      { error: "Internal server error", details: error.message },
      { status: 500 }
    );
  }
}
